[user]
    name = Henri Lemoine
    email = henri123lemoine@gmail.com

[credential]
    helper = osxkeychain

[core]
    excludesfile = ~/.gitignore
    editor = nvim
    autocrlf = input
    pager = delta

[init]
    defaultBranch = main

[interactive]
    diffFilter = delta --color-only

[delta]
    navigate = true
    dark = true
    side-by-side = true
    line-numbers = true
    syntax-theme = OneHalfDark

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[help]
    autocorrect = prompt

[branch]
    autoSetupRebase = always

[merge]
    conflictstyle = diff3
	ff = only

[fetch]
    prune = true

[rerere]
    enabled = true

[commit]

[pull]
    rebase = true

[push]
    autoSetupRemote = true

[alias]
    s = status -sb
	aa = add -A
    df = diff -w
    ds = diff -w --staged
    showw = show -w
    last = log -1 HEAD
    unstage = reset HEAD --
    uncommit = reset HEAD^
    undo = reset HEAD^
    # Add + commit in one go
    ac = !git add -A && git commit
    # Interactive rebase shortcut
    ri = rebase -i

	# fm <commit-hash> = Fix a mistake in an older commit
	# 1. Stages your current changes and marks them to be merged into that old commit
	# 2. Starts a rebase that moves and merges the fix automatically
	# 3. You just save & close the rebase editor when it opens
	# End result: history looks like the old commit was correct from the start
    fm = "!f() { git commit --fixup=$1 && git rebase -i --autosquash $1^; }; f"

    # show today's work
    today = log --since=midnight --oneline --graph --decorate

[rebase]
	autosquash = true
